name: Build and push

on:
    workflow_call:
        inputs:
            env:
                description: image environment
                required: true
                type: string

jobs:
    build_and_push:
        name: Build and Push
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}
            - name: Define tag
              id: tag
              run: |
                  echo '::set-output name=name::latest'
                  echo '::set-output name=url::${{ secrets.ECR_REGISTRY }}:latest'
            - name: Docker login
              run: aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            # - name: Define .env
            #   run: |
            #       export NODE_ENV=production
            #       cp .env.${{ inputs.env }} .env
            #       cat .env
            - name: Build and push
              uses: docker/build-push-action@v3
              with:
                  context: .
                  platforms: linux/arm64,linux/amd64
                  push: true
                  tags: ${{ steps.tag.outputs.url }}
            - name: Remove untagged images
              run: |
                  IMAGES_TO_DELETE=$( aws ecr list-images --region ${{ secrets.AWS_REGION }} --repository-name ${{ secrets.ECR_REPO_NAME }} --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
                  aws ecr batch-delete-image --region ${{ secrets.AWS_REGION }} --repository-name ${{ secrets.ECR_REPO_NAME }} --image-ids "$IMAGES_TO_DELETE" || true
